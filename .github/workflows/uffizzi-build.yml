name: Build PR Image
on:
  pull_request:
    types: [opened, synchronize, reopened, closed, review_requested]

jobs:
  build-harbor-registry:
    name: Build and push `Harbor Registry`
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.uffizzi.com/${{ env.UUID_WORKER }}
          tags: |
            type=raw,value=60d

      - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            harbor_base_image_version=v2.4.3
            harbor_base_namespace=goharbor
          file: ./make/photon/registry/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  build-harbor-core:
    name: Build and push `Harbor Core`
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.uffizzi.com/${{ env.UUID_WORKER }}
          tags: |
            type=raw,value=60d

      - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            harbor_base_image_version=v2.4.3
            harbor_base_namespace=goharbor
          file: ./make/photon/core/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  build-harbor-portal:
    name: Build and push `Harbor Portal`
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.uffizzi.com/${{ env.UUID_WORKER }}
          tags: |
            type=raw,value=60d

      - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            harbor_base_image_version=v2.4.3
            harbor_base_namespace=goharbor
          file: ./make/photon/portal/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  build-jobservice:
    name: Build and push `Jobservice`
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.uffizzi.com/${{ env.UUID_WORKER }}
          tags: |
            type=raw,value=60d

      - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            harbor_base_image_version=v2.4.3
            harbor_base_namespace=goharbor
          file: ./make/photon/jobservice/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  build-registry-ctl:
    name: Build and push `Registry-ctl`
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.uffizzi.com/${{ env.UUID_WORKER }}
          tags: |
            type=raw,value=60d

      - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            harbor_base_image_version=v2.4.3
            harbor_base_namespace=goharbor
          file: ./make/photon/registryctl/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha, mode=max

  # build-notary-server:
  #   name: Build and push `Notary Server`
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tags: ${{ steps.meta.outputs.tags }}
  #   if: ${{ github.event.action != 'closed' }}
  #   steps:
  #     - name: Checkout git repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Generate UUID image name
  #       id: uuid
  #       run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

  #     - name: Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: registry.uffizzi.com/${{ env.UUID_WORKER }}
  #         tags: |
  #           type=raw,value=60d

  #     - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         build-args: |
  #           harbor_base_image_version=v2.4.3
  #           harbor_base_namespace=goharbor
  #         file: ./make/photon/notary-server/Dockerfile
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         push: true
  #         cache-from: type=gha
  #         cache-to: type=gha, mode=max

  # build-notary-signer:
  #   name: Build and push `Notary Server`
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tags: ${{ steps.meta.outputs.tags }}
  #   if: ${{ github.event.action != 'closed' }}
  #   steps:
  #     - name: Checkout git repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Generate UUID image name
  #       id: uuid
  #       run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

  #     - name: Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: registry.uffizzi.com/${{ env.UUID_WORKER }}
  #         tags: |
  #           type=raw,value=60d

  #     - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         build-args: |
  #           harbor_base_image_version=v2.4.3
  #           harbor_base_namespace=goharbor
  #         file: ./make/photon/notary-signer/Dockerfile
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         push: true
  #         cache-from: type=gha
  #         cache-to: type=gha, mode=max

  # build-harbor-signer:
  #   name: Build and push `Harbor Signer`
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tags: ${{ steps.meta.outputs.tags }}
  #   if: ${{ github.event.action != 'closed' }}
  #   steps:
  #     - name: Checkout git repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Generate UUID image name
  #       id: uuid
  #       run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV

  #     - name: Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: registry.uffizzi.com/${{ env.UUID_WORKER }}
  #         tags: |
  #           type=raw,value=60d

  #     - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: ./src/vendor/github.com/theupdateframework/notary
  #         file: ./src/vendor/github.com/theupdateframework/notary/signer.Dockerfile
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         push: true
  #         cache-from: type=gha
  #         cache-to: type=gha, mode=max


  render-compose-file:
    name: Render Docker Compose File
    # Pass output of this workflow to another triggered by `workflow_run` event.
    runs-on: ubuntu-latest
    needs:
      - build-harbor-registry
      - build-harbor-core
      - build-harbor-portal
      - build-registry-ctl
      - build-jobservice
      # - build-notary-server
      # - build-notary-signer

    outputs:
      compose-file-cache-key: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          REGISTRY_IMAGE=${{ needs.build-harbor-server.outputs.tags }}
          CORE_IMAGE=${{needs.build-harbor-core.outputs.tags}}
          REGISTRY_CTL_IMAGE=${{needs.build-registry-ctl.outputs.tags}}
          PORTAL_IMAGE=${{needs.build-harbor-portal.outputs.tags}}
          JOBSERVICE_IMAGE=${{needs.build-jobservice.outputs.tags}}
          # SERVER_IMAGE=${{needs.build-notary-server.outputs.tags}}
          # SIGNER_IMAGE=${{needs.build-notary-signer.outputs.tags}}
          export REGISTRY_IMAGE CORE_IMAGE REGISTRY_CTL_IMAGE JOBSERVICE_IMAGE
          export PORTAL_IMAGE
          export UFFIZZI_URL=\$UFFIZZI_URL
          # Render simple template from environment variables.
          envsubst < docker-compose.uffizzi.yml > docker-compose.rendered.yml
          cat docker-compose.rendered.yml
      - name: Upload Rendered Compose File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: docker-compose.rendered.yml
          retention-days: 2
      - name: Serialize PR Event to File
        run: |
          cat << EOF > event.json
          ${{ toJSON(github.event) }}

          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2

  delete-preview:
    name: Call for Preview Deletion
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
      # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
      - name: Serialize PR Event to File
        run: |
          cat << EOF > event.json
          ${{ toJSON(github.event) }}

          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2
